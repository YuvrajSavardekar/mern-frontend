{"version":3,"file":"static/js/191.28dc9d6f.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/util/validators.js","user/pages/Auth.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  // when we change image this useEffect() triggers\r\n  useEffect(() => {\r\n    if(!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    //this run after fileReader.readDataUrl() finished\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    }\r\n    fileReader.readAsDataURL(file);\r\n    console.log(previewUrl);\r\n  }, [file]);\r\n\r\n  const pickerHandler = e => {\r\n    e.preventDefault();\r\n\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if(e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);      // because setIsValid not trigger immedietely\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);   // to validate entire form\r\n  };\r\n\r\n  const pickImageHandler = e => {\r\n    filePickerRef.current.click();\r\n  }\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n      id={props.id}\r\n      ref={filePickerRef}\r\n      style={{ display: 'none'}}\r\n      type='file'\r\n      accept=\".jpg, .png, .jpeg\"\r\n      onChange={pickerHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && 'center'}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} style={{ width: '13rem', height: '13rem' }} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\r\n      </div>\r\n    </div>\r\n  ) \r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\n\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n\n    case \"TOUCH\": // when we first land on this page error appears so we use isTouched to give\n      return {\n        // user a chance, it trigger when user click on that input/textarea field\n        ...state,\n        isTouched: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isValid: props.initialValid || false,\n    isTouched: false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (e) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: e.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({ type: \"TOUCH\" });\n  };\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if(!state.inputs[inputId]) {            // for name field which is not available in login form\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid; // for overall form validity we also check in else\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid, // overall form validity\r\n      };\r\n\r\n    case \"SET_DATA\":     // updating place, we create new state we previous values\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      inputId: id,\r\n      value: value,\r\n      isValid: isValid,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formValidity: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport \"./Auth.css\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/users/signup`,\r\n          \"POST\",\r\n          formData // it automatically sets header in fetch API\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              element=\"input\"\r\n              id=\"name\"\r\n              type=\"text\"\r\n              label=\"Your Name\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              errorText=\"Please enter a name.\"\r\n              onInput={inputHandler}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              center\r\n              id=\"image\"\r\n              onInput={inputHandler}\r\n              errorText=\"Please provide an image\"\r\n            />\r\n          )}\r\n          <Input\r\n            element=\"input\"\r\n            id=\"email\"\r\n            type=\"email\"\r\n            label=\"E-Mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            element=\"input\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, at least 5 characters.\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","console","log","className","id","ref","style","display","type","accept","onChange","e","pickedFile","preventDefault","fileIsValid","target","files","length","onInput","center","src","width","height","alt","Button","onClick","current","click","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","event","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","done","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2"],"sourceRoot":""}